apply plugin: 'war'
apply plugin: 'gaelyk'
apply plugin: 'appengine-geb'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'groovy'

def compatibilityVersion = 1.7
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-gaelyk-plugin:0.6'
        classpath 'org.gradle.api.plugins:gradle-appengine-geb-plugin:0.4'
    }
}

repositories {
    maven { url 'http://dl.bintray.com/gaelyk/groovy-patches' }
    mavenCentral()
    mavenLocal()
}

dependencies {
    def gaeVersion = '1.9.1'
    def groovyVersion = '2.1.10'
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"

    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion",
            "com.google.appengine:appengine-api-labs:$gaeVersion"
    compile 'org.gaelyk:gaelyk:2.1'
    compile 'com.google.http-client:google-http-client-appengine:1.17.0-rc'


    testCompile 'org.gaelyk:gaelyk-spock:0.4'
    testCompile "com.google.appengine:appengine-api-stubs:$gaeVersion",
                "com.google.appengine:appengine-testing:$gaeVersion"
                
    functionalTestCompile 'org.codehaus.geb:geb-spock:0.7.2',
                          'org.seleniumhq.selenium:selenium-firefox-driver:2.35.0'
    appengineSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"
}

idea {
    project {
        jdkName = compatibilityVersion

        ipr.withXml { provider ->
            def node = provider.asNode()

            // Set Gradle home
            def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
            gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
        }
    }
}

eclipse {
    project {
        name 'gaelyk-project'
        file {
            whenMerged { project ->
                project.natures << 'com.google.appengine.eclipse.core.gaeNature'
                project.natures << 'com.google.gdt.eclipse.core.webAppNature'
                project.buildCommands << [name: 'com.google.appengine.eclipse.core.enhancerbuilder']
                project.buildCommands << [name: 'com.google.appengine.eclipse.core.projectValidator']
                project.buildCommands << [name: 'com.google.gdt.eclipse.core.webAppProjectValidator']
            }
        }
    }
    classpath {
        file {
            withXml { xml ->
                xml.asNode().classpathentry.find { it.@kind == 'output' && it.@path == 'bin' }.@path = 'src/main/webapp/WEB-INF/classes'
                xml.asNode().appendNode('classpathentry', [kind: 'con', path: 'com.google.appengine.eclipse.core.GAE_CONTAINER'])
                            .appendNode('attributes')
                            .appendNode('attribute', [name: 'org.eclipse.jst.component.nondependency', value: '/src/main/webapp/WEB-INF/lib'])
                xml.asNode().appendNode('classpathentry', [exported: 'true', kind: 'con', path: 'GROOVY_SUPPORT'])
                            .appendNode('attributes')
                            .appendNode('attribute', [name: 'org.eclipse.jst.component.nondependency', value: '/src/main/webapp/WEB-INF/lib'])
            }
        }
    }
}

def env = System.getenv()
appengine {
	appcfg {
		email = env['GAE_USER']
		password = env['GAE_PASS']

		app {
			id = 'lgtmin'
		}
	}
}
